## Default build parameters
## - use 'DOCKER_BUILD_ARGS' to defined custom build variables.
##   variables are separated by a space
DOCKER_BUILD_PATH ?= .
DOCKER_BUILD_FLAGS ?= --no-cache
DOCKER_BUILD_FILE ?= ./Dockerfile

## Detect APP version
## - for Gitlab CI we use the tag "ci-build" to identified the build container
## - for others build (local, etc.) we get the content of VERSION file
ifeq ($(GITLAB_CI),true)
	DOCKER_APP_VERSION = ci-build
else
	DOCKER_APP_VERSION = $(shell cat VERSION)
endif

## Image name
## - use 'DOCKER_IMAGE' envvar to specify the namespace
DOCKER_IMAGE_NAME = $(DOCKER_IMAGE):$(DOCKER_APP_VERSION)



.PHONY: docker\:names
## Show docker image names
docker\:names:
	$(call assert-set,DOCKER_IMAGE)
	@echo $(DOCKER_IMAGE_NAME)


.PHONY: docker\:build
## Build docker image
docker\:build: $(DOCKER)
	$(call assert-set,DOCKER_IMAGE)
	@BUILD_ARGS=`for arg in $$DOCKER_BUILD_ARGS; do \
		printf -- '--build-arg %s ' "$$arg"; \
	done`; \
	echo "Building $(DOCKER_IMAGE_NAME) from $(DOCKER_BUILD_FILE) with [$$BUILD_ARGS] build args..."; \
	$(DOCKER) build -t $(DOCKER_IMAGE_NAME) $$BUILD_ARGS -f $(DOCKER_BUILD_FILE) $(DOCKER_BUILD_PATH)


.PHONY: docker\:enter
## Enter into the image with a bash shell
docker\:enter: $(DOCKER)
	$(call assert-set,DOCKER_IMAGE)
	$(DOCKER) run -it --rm --entrypoint=bash $(DOCKER_IMAGE_NAME)
